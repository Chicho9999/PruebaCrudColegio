// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PruebaCrudColegio.Infrastructure;

#nullable disable

namespace PruebaCrudColegio.Infrastructure.Migrations
{
    [DbContext(typeof(PruebaCrudColegioContext))]
    [Migration("20240913110814_initial-migration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PruebaCrudColegio.Core.Model.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Grade");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cbea81b-aada-4f31-8250-467bb3a5c0aa"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 13, 8, 8, 12, 503, DateTimeKind.Unspecified).AddTicks(5984), new TimeSpan(0, -3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Normal",
                            ProfessorId = new Guid("a0327b17-49d7-499f-97e1-cfd28df1b094"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("5f85a554-16c7-4780-96aa-7dad227fb974"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 13, 8, 8, 12, 503, DateTimeKind.Unspecified).AddTicks(5986), new TimeSpan(0, -3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Privada",
                            ProfessorId = new Guid("9ba804fb-e068-4c49-8754-4beb6437de51"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("PruebaCrudColegio.Core.Model.Professor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Professor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0327b17-49d7-499f-97e1-cfd28df1b094"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 13, 8, 8, 12, 503, DateTimeKind.Unspecified).AddTicks(5945), new TimeSpan(0, -3, 0, 0, 0)),
                            FirstName = "Alejandro",
                            Gender = "M",
                            IsDeleted = false,
                            LastName = "Lopez",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("9ba804fb-e068-4c49-8754-4beb6437de51"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 13, 8, 8, 12, 503, DateTimeKind.Unspecified).AddTicks(5981), new TimeSpan(0, -3, 0, 0, 0)),
                            FirstName = "Angela",
                            Gender = "F",
                            IsDeleted = false,
                            LastName = "Perez",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("PruebaCrudColegio.Core.Model.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b6682c4-0841-4612-b1fd-4a9d565543e2"),
                            BirthDay = new DateTime(1995, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 13, 8, 8, 12, 503, DateTimeKind.Unspecified).AddTicks(5989), new TimeSpan(0, -3, 0, 0, 0)),
                            FirstName = "Carlos",
                            Gender = "M",
                            IsDeleted = false,
                            LastName = "Chichi",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("f4e9bc25-f21e-473a-bdd3-cee5cacbdf2e"),
                            BirthDay = new DateTime(1993, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 13, 8, 8, 12, 503, DateTimeKind.Unspecified).AddTicks(6060), new TimeSpan(0, -3, 0, 0, 0)),
                            FirstName = "Antonella",
                            Gender = "F",
                            IsDeleted = false,
                            LastName = "Perez",
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("PruebaCrudColegio.Core.Model.StudentGrade", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Section")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId", "GradeId");

                    b.HasIndex("GradeId");

                    b.ToTable("StudentGrade");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("0b6682c4-0841-4612-b1fd-4a9d565543e2"),
                            GradeId = new Guid("9cbea81b-aada-4f31-8250-467bb3a5c0aa"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 13, 8, 8, 12, 503, DateTimeKind.Unspecified).AddTicks(6092), new TimeSpan(0, -3, 0, 0, 0)),
                            Id = new Guid("36fe9953-01a4-436f-9b31-c52ad7d45f16"),
                            IsDeleted = false,
                            Section = 1,
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            StudentId = new Guid("0b6682c4-0841-4612-b1fd-4a9d565543e2"),
                            GradeId = new Guid("5f85a554-16c7-4780-96aa-7dad227fb974"),
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 13, 8, 8, 12, 503, DateTimeKind.Unspecified).AddTicks(6110), new TimeSpan(0, -3, 0, 0, 0)),
                            Id = new Guid("04761a8e-c223-43a5-8e7d-f2069c7672e1"),
                            IsDeleted = false,
                            Section = 2,
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("PruebaCrudColegio.Core.Model.Grade", b =>
                {
                    b.HasOne("PruebaCrudColegio.Core.Model.Professor", "Professor")
                        .WithMany("Grades")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("PruebaCrudColegio.Core.Model.StudentGrade", b =>
                {
                    b.HasOne("PruebaCrudColegio.Core.Model.Grade", "Grade")
                        .WithMany("Students")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PruebaCrudColegio.Core.Model.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PruebaCrudColegio.Core.Model.Grade", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("PruebaCrudColegio.Core.Model.Professor", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("PruebaCrudColegio.Core.Model.Student", b =>
                {
                    b.Navigation("Grades");
                });
#pragma warning restore 612, 618
        }
    }
}
